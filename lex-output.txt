PUBLIC 1 1 public
CLASS 1 8 class
ID 1 14 Teste
LEFT_CURLY_BRACKET 1 20 {
PUBLIC 2 5 public
STATIC 2 12 static
VOID 2 19 void
MAIN 2 24 main
LEFT_PARENTHESIS 2 28 (
STRING[] 2 29 String[]
ID 2 38 args
RIGHT_PARENTHESIS 2 42 )
LEFT_CURLY_BRACKET 2 44 {
DOUBLE 3 9 double
ID 3 16 cont
SEMICOLON 3 20 ;
DOUBLE 4 9 double
ID 4 16 a
COMMA 4 17 ,
ID 4 18 b
COMMA 4 19 ,
ID 4 20 c
SEMICOLON 4 21 ;
ID 5 9 cont
ASSIGNMENT_OPERATOR 5 14 =
REAL_NUMBER 5 16 10
SEMICOLON 5 18 ;
WHILE 6 9 while
LEFT_PARENTHESIS 6 14 (
ID 6 15 cont
GREATER 6 20 >
REAL_NUMBER 6 22 0
RIGHT_PARENTHESIS 6 23 )
LEFT_CURLY_BRACKET 6 25 {
ID 7 13 a
ASSIGNMENT_OPERATOR 7 15 =
LER_DOUBLE 7 17 lerDouble
LEFT_PARENTHESIS 7 26 (
RIGHT_PARENTHESIS 7 27 )
SEMICOLON 7 28 ;
ID 8 13 b
ASSIGNMENT_OPERATOR 8 15 =
LER_DOUBLE 8 17 lerDouble
LEFT_PARENTHESIS 8 26 (
RIGHT_PARENTHESIS 8 27 )
SEMICOLON 8 28 ;
IF 9 13 if
LEFT_PARENTHESIS 9 16 (
ID 9 17 a
GREATER 9 19 >
ID 9 21 b
RIGHT_PARENTHESIS 9 22 )
LEFT_CURLY_BRACKET 9 24 {
ID 10 17 c
ASSIGNMENT_OPERATOR 10 19 =
ID 10 21 a
SUBTRACTION_OPERATOR 10 23 -
ID 10 25 b
SEMICOLON 10 26 ;
RIGHT_CURLY_BRACKET 11 13 }
ELSE 11 15 else
LEFT_CURLY_BRACKET 11 20 {
ID 12 17 c
ASSIGNMENT_OPERATOR 12 19 =
ID 12 21 b
SUBTRACTION_OPERATOR 12 23 -
ID 12 25 a
SEMICOLON 12 26 ;
RIGHT_CURLY_BRACKET 13 13 }
PRINTLN 14 13 System.out.println
LEFT_PARENTHESIS 14 31 (
ID 14 32 c
RIGHT_PARENTHESIS 14 33 )
SEMICOLON 14 34 ;
ID 15 13 cont
ASSIGNMENT_OPERATOR 15 18 =
ID 15 20 cont
SUBTRACTION_OPERATOR 15 25 -
REAL_NUMBER 15 27 1
SEMICOLON 15 28 ;
RIGHT_CURLY_BRACKET 16 9 }
PRINTLN 17 9 System.out.println
LEFT_PARENTHESIS 17 27 (
ID 17 28 c
RIGHT_PARENTHESIS 17 29 )
SEMICOLON 17 30 ;
RIGHT_CURLY_BRACKET 18 5 }
RIGHT_CURLY_BRACKET 19 1 }
